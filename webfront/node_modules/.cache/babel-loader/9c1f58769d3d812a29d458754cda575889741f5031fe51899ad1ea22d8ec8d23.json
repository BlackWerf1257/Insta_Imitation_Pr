{"ast":null,"code":"var _jsxFileName = \"F:\\\\Spring\\\\Projects\\\\Insta_Imitation_Pr\\\\webfront\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useContext, useLocation, Routes, Route, useNavigate } from 'react-router-dom';\nimport NavBar from './components/NavBar';\n//import Root from './components/Root';\nimport Footer from './components/Footer';\nimport Info from './components/InfoBar';\nimport Login from './components/Login';\nimport PostsGrid from './components/MainPage';\nimport About from './About';\nimport { useState, useEffect } from 'react';\n//index에서 BrowserRouter로 감쌈(Router 사용 금지)\n\n//\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const location = useLocation();\n  const [isLogged, SetLoggedBool] = useState(() => {\n    const loggedBool = sessionStorage.getItem('SboolLogged');\n    return loggedBool === 'true';\n  });\n  const [userName, SetUserName] = useContext(() => {\n    return sessionStorage.getItem('SuserName') || '';\n  });\n  useEffect(() => {\n    //값이 null이 아닌지 판단\n    if (location.state && typeof location.state.isLogged !== 'undefined') {\n      SetLoggedBool(!!location.state.isLogged); //명시적으로 Boolean으로 전환\n      SetUserName(location.state.userId);\n    }\n    /*if(sessionStorage.getItem('SboolLogged') !== null && sessionStorage.getItem('SuserName') !== null){\n       SetLoggedBool(sessionStorage.getItem('SboolLogged'));\n       SetUserName(sessionStorage.getItem('SuserName'));\n       console.log(sessionStorage.getItem('SuserName'));\n    }*/\n  }, [location.state]);\n\n  //값 업데이트 이후에만 작동\n  useEffect(() => {\n    //Web Storage API_sessionStorage: 저장공간 세션이 유지되는 동안 제공, localStorage: 브라우저를 새로 열어도 유지\n    //키-쌍의 형태로 저장\n    sessionStorage.setItem(\"SboolLogged\", isLogged.toString());\n    sessionStorage.setItem(\"SuserName\", userName);\n  }, [isLogged, userName]);\n\n  /* useEffect(() => {\n  console.log(\"🔄 isLogged 상태 변경됨:\", isLogged);\n  }, [isLogged]);\n  useEffect(() => {\n  console.log(\"🛬 location.state 감지됨:\", location.state);\n  }, [location.state]);*/\n\n  const Logout = () => {\n    if (isLogged && userName !== '') {\n      // 1. sessionStorage에 명시적으로 'false'를 저장하여 로그인 상태를 강제로 해제\n      //    removeItem 후 setItem으로 덮어쓰는 것이 훨씬 확실합니다.\n      sessionStorage.setItem('SboolLogged', 'false'); // <-- 이 줄을 추가합니다.\n      sessionStorage.removeItem('SuserName'); // 사용자 이름은 제거 (혹시 모르니 확실히)\n\n      // 2. React 상태 업데이트\n      SetLoggedBool(false);\n      SetUserName('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App-container\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      isLogged: isLogged,\n      onLogout: Logout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"Main-container-class\",\n      children: [/*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(PostsGrid, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/about\",\n          element: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Info, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"x2f2Bkc7XiJ4pqiO7eAAZAFrlXI=\", false, function () {\n  return [useLocation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useContext","useLocation","Routes","Route","useNavigate","NavBar","Footer","Info","Login","PostsGrid","About","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","location","isLogged","SetLoggedBool","loggedBool","sessionStorage","getItem","userName","SetUserName","state","userId","setItem","toString","Logout","removeItem","className","children","onLogout","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["F:/Spring/Projects/Insta_Imitation_Pr/webfront/src/App.js"],"sourcesContent":["import './App.css';\nimport { useContext, useLocation, Routes, Route, useNavigate} from 'react-router-dom';\nimport NavBar from './components/NavBar';\n//import Root from './components/Root';\nimport Footer from './components/Footer';\nimport Info from './components/InfoBar';\nimport Login from './components/Login';\nimport PostsGrid from './components/MainPage';\nimport About from './About';\nimport { useState, useEffect } from 'react';\n//index에서 BrowserRouter로 감쌈(Router 사용 금지)\n\n//\nfunction App() {\n  const location = useLocation();\n  const [isLogged, SetLoggedBool] = useState(() => \n    {const loggedBool = sessionStorage.getItem('SboolLogged');\n      return loggedBool === 'true';\n  });\n  const [userName, SetUserName] = useContext(() => {return sessionStorage.getItem('SuserName') || ''});\n\n  \n   useEffect(() => {\n    //값이 null이 아닌지 판단\n     if (location.state && typeof location.state.isLogged !== 'undefined'){\n        SetLoggedBool(!!location.state.isLogged); //명시적으로 Boolean으로 전환\n        SetUserName(location.state.userId);\n     }\n     /*if(sessionStorage.getItem('SboolLogged') !== null && sessionStorage.getItem('SuserName') !== null){\n        SetLoggedBool(sessionStorage.getItem('SboolLogged'));\n        SetUserName(sessionStorage.getItem('SuserName'));\n        console.log(sessionStorage.getItem('SuserName'));\n     }*/\n   }, [location.state]);\n\n   //값 업데이트 이후에만 작동\n   useEffect(() => {\n        //Web Storage API_sessionStorage: 저장공간 세션이 유지되는 동안 제공, localStorage: 브라우저를 새로 열어도 유지\n        //키-쌍의 형태로 저장\n        sessionStorage.setItem(\"SboolLogged\", isLogged.toString());\n        sessionStorage.setItem(\"SuserName\", userName);\n   }, [isLogged, userName]); \n\n\n  /* useEffect(() => {\n  console.log(\"🔄 isLogged 상태 변경됨:\", isLogged);\n}, [isLogged]);\n\nuseEffect(() => {\n  console.log(\"🛬 location.state 감지됨:\", location.state);\n}, [location.state]);*/\n   \n\nconst Logout = () => {\n    if (isLogged && userName !== '') {\n    // 1. sessionStorage에 명시적으로 'false'를 저장하여 로그인 상태를 강제로 해제\n    //    removeItem 후 setItem으로 덮어쓰는 것이 훨씬 확실합니다.\n    sessionStorage.setItem('SboolLogged', 'false'); // <-- 이 줄을 추가합니다.\n    sessionStorage.removeItem('SuserName'); // 사용자 이름은 제거 (혹시 모르니 확실히)\n\n    // 2. React 상태 업데이트\n    SetLoggedBool(false);\n    SetUserName('');\n    }\n};\n\n  return (\n\n    <div className='App-container'>\n          <NavBar isLogged={isLogged} onLogout={Logout}></NavBar>\n\n      <main className='Main-container-class'>\n       \n        <Routes>\n            <Route path=\"/\" element={<PostsGrid/>} />\n            <Route path=\"/about\" element={<About/>} />\n            <Route path=\"/login\" element={<Login/>} />\n        </Routes>\n        <>\n        </>\n      </main>\n\n      <Info></Info>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
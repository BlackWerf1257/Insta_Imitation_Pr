{"ast":null,"code":"var _jsxFileName = \"F:\\\\Spring\\\\Projects\\\\Insta_Imitation_Pr\\\\webfront\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useLocation, Routes, Route, useNavigate } from 'react-router-dom';\nimport { useContext, useState, useEffect } from 'react';\nimport NavBar from './components/NavBar';\n//import Root from './components/Root';\nimport Footer from './components/Footer';\nimport Info from './components/InfoBar';\nimport Login from './components/Login';\nimport PostsGrid from './components/MainPage';\nimport About from './About';\nimport Register from './components/Register';\nimport NewPost from './components/NewPost';\nimport ViewPost from './components/ViewPostPost';\n//index에서 BrowserRouter로 감쌈(Router 사용 금지)\n\n//\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const location = useLocation();\n  const [isLogged, SetLoggedBool] = useState(() => {\n    const loggedBool = sessionStorage.getItem('SboolLogged');\n    return loggedBool === 'true';\n  });\n  const [userName, SetUserName] = useState(() => {\n    return sessionStorage.getItem('SuserName') || '';\n  });\n  useEffect(() => {\n    //값이 null이 아닌지 판단\n    if (location.state && typeof location.state.isLogged !== 'undefined') {\n      SetLoggedBool(!!location.state.isLogged); //명시적으로 Boolean으로 전환\n      SetUserName(location.state.userId);\n    }\n    /*if(sessionStorage.getItem('SboolLogged') !== null && sessionStorage.getItem('SuserName') !== null){\r\n       SetLoggedBool(sessionStorage.getItem('SboolLogged'));\r\n       SetUserName(sessionStorage.getItem('SuserName'));\r\n       console.log(sessionStorage.getItem('SuserName'));\r\n    }*/\n  }, [location.state]);\n\n  //값 업데이트 이후에만 작동\n  useEffect(() => {\n    //Web Storage API_sessionStorage: 저장공간 세션이 유지되는 동안 제공, localStorage: 브라우저를 새로 열어도 유지\n    //키-쌍의 형태로 저장\n    sessionStorage.setItem(\"SboolLogged\", isLogged.toString());\n    sessionStorage.setItem(\"SuserName\", userName);\n  }, [isLogged, userName]);\n\n  /* useEffect(() => {\r\n  console.log(\"🔄 isLogged 상태 변경됨:\", isLogged);\r\n  }, [isLogged]);\r\n  useEffect(() => {\r\n  console.log(\"🛬 location.state 감지됨:\", location.state);\r\n  }, [location.state]);*/\n\n  const Logout = () => {\n    if (isLogged && userName !== '') {\n      sessionStorage.setItem('SboolLogged', 'false');\n      sessionStorage.removeItem('SuserName'); // 사용자 이름은 제거 (혹시 모르니 확실히)\n\n      // 2. React 상태 업데이트\n      SetLoggedBool(false);\n      SetUserName('');\n      alert('로그아웃 되었습니다');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App-container\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      isLogged: isLogged,\n      onLogout: Logout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"Main-container-class\",\n      children: [/*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(PostsGrid, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/about\",\n          element: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/register\",\n          element: /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 46\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/newPost\",\n          element: /*#__PURE__*/_jsxDEV(NewPost, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Info, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NFLt70Rmatq8O7Do4kqM3AbMDXo=\", false, function () {\n  return [useLocation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useLocation","Routes","Route","useNavigate","useContext","useState","useEffect","NavBar","Footer","Info","Login","PostsGrid","About","Register","NewPost","ViewPost","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","location","isLogged","SetLoggedBool","loggedBool","sessionStorage","getItem","userName","SetUserName","state","userId","setItem","toString","Logout","removeItem","alert","className","children","onLogout","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["F:/Spring/Projects/Insta_Imitation_Pr/webfront/src/App.js"],"sourcesContent":["import './App.css';\r\nimport { useLocation, Routes, Route, useNavigate} from 'react-router-dom';\r\nimport { useContext, useState, useEffect } from 'react';\r\nimport NavBar from './components/NavBar';\r\n//import Root from './components/Root';\r\nimport Footer from './components/Footer';\r\nimport Info from './components/InfoBar';\r\nimport Login from './components/Login';\r\nimport PostsGrid from './components/MainPage';\r\nimport About from './About';\r\nimport Register from './components/Register';\r\nimport NewPost from './components/NewPost';\r\nimport ViewPost from './components/ViewPostPost';\r\n//index에서 BrowserRouter로 감쌈(Router 사용 금지)\r\n\r\n//\r\nfunction App() {\r\n  const location = useLocation();\r\n  const [isLogged, SetLoggedBool] = useState(() => \r\n    {const loggedBool = sessionStorage.getItem('SboolLogged');\r\n      return loggedBool === 'true';\r\n  });\r\n  const [userName, SetUserName] = useState(() => {return sessionStorage.getItem('SuserName') || ''});\r\n\r\n  \r\n   useEffect(() => {\r\n    //값이 null이 아닌지 판단\r\n     if (location.state && typeof location.state.isLogged !== 'undefined'){\r\n        SetLoggedBool(!!location.state.isLogged); //명시적으로 Boolean으로 전환\r\n        SetUserName(location.state.userId);\r\n     }\r\n     /*if(sessionStorage.getItem('SboolLogged') !== null && sessionStorage.getItem('SuserName') !== null){\r\n        SetLoggedBool(sessionStorage.getItem('SboolLogged'));\r\n        SetUserName(sessionStorage.getItem('SuserName'));\r\n        console.log(sessionStorage.getItem('SuserName'));\r\n     }*/\r\n   }, [location.state]);\r\n\r\n   //값 업데이트 이후에만 작동\r\n   useEffect(() => {\r\n        //Web Storage API_sessionStorage: 저장공간 세션이 유지되는 동안 제공, localStorage: 브라우저를 새로 열어도 유지\r\n        //키-쌍의 형태로 저장\r\n        sessionStorage.setItem(\"SboolLogged\", isLogged.toString());\r\n        sessionStorage.setItem(\"SuserName\", userName);\r\n   }, [isLogged, userName]); \r\n\r\n\r\n  /* useEffect(() => {\r\n  console.log(\"🔄 isLogged 상태 변경됨:\", isLogged);\r\n}, [isLogged]);\r\n\r\nuseEffect(() => {\r\n  console.log(\"🛬 location.state 감지됨:\", location.state);\r\n}, [location.state]);*/\r\n   \r\n\r\nconst Logout = () => {\r\n    if (isLogged && userName !== '') {\r\n    sessionStorage.setItem('SboolLogged', 'false');\r\n    sessionStorage.removeItem('SuserName'); // 사용자 이름은 제거 (혹시 모르니 확실히)\r\n\r\n    // 2. React 상태 업데이트\r\n    SetLoggedBool(false);\r\n    SetUserName('');\r\n    alert('로그아웃 되었습니다');\r\n    }\r\n};\r\n\r\n  return (\r\n\r\n    <div className='App-container'>\r\n          <NavBar isLogged={isLogged} onLogout={Logout}></NavBar>\r\n\r\n      <main className='Main-container-class'>\r\n       \r\n        <Routes>\r\n            <Route path=\"/\" element={<PostsGrid/>} />\r\n            <Route path=\"/about\" element={<About/>} />\r\n            <Route path=\"/login\" element={<Login/>} />\r\n            <Route path=\"/register\" element={<Register/>} />\r\n            <Route path=\"/newPost\" element={<NewPost/>} />\r\n        </Routes>\r\n        <>\r\n        </>\r\n      </main>\r\n\r\n      <Info></Info>\r\n      <Footer></Footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}